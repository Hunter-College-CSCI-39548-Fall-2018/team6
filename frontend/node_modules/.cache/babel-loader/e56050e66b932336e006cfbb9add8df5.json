{"ast":null,"code":"import _objectSpread from \"/Users/topgyaltsering/Desktop/team6-topgyal/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/topgyaltsering/Desktop/team6-topgyal/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/topgyaltsering/Desktop/team6-topgyal/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport decode from \"jwt-decode\";\n/*\nAuthor: Eunice Hew\nAuthentication for login, registration, forget password\n*/\n\nvar AuthService =\n/*#__PURE__*/\nfunction () {\n  function AuthService(domain) {\n    _classCallCheck(this, AuthService);\n\n    this.domain = domain || \"http://localhost:8080\"; // API server domain\n\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(email, password) {\n      var _this = this;\n\n      // Get a token from api server using the fetch api\n      return this.fetch(\"\".concat(this.domain, \"/Login\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: email,\n          password: password\n        })\n      }).then(function (res) {\n        _this.setToken(res.token); // Setting the token in localStorage\n\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"forgotPassword\",\n    value: function forgotPassword(email) {\n      var _this2 = this;\n\n      return this.fetch(\"\".concat(this.domain, \"/Login\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n          email: email\n        })\n      }).then(function (res) {\n        _this2.setToken(res.token);\n\n        return Promise.resolve(res);\n      });\n    }\n  }, {\n    key: \"loggedIn\",\n    value: function loggedIn() {\n      // Checks if there is a saved token and it's still valid\n      var token = this.getToken(); // Getting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    }\n  }, {\n    key: \"isTokenExpired\",\n    value: function isTokenExpired(token) {\n      try {\n        var decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired.\n          return true;\n        } else return false;\n      } catch (err) {\n        return false;\n      }\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(idToken) {\n      // Saves user token to localStorage\n      localStorage.setItem(\"id_token\", idToken);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem(\"id_token\");\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem(\"id_token\");\n    }\n  }, {\n    key: \"getProfile\",\n    value: function getProfile() {\n      // Using jwt-decode npm package to decode the token\n      return decode(this.getToken());\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x, _x2) {\n        return _fetch.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n\n      return fetch;\n    }(function (url, options) {\n      // performs api calls sending the required authentication headers\n      var headers = {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }; // Setting Authorization header\n      // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      if (this.loggedIn()) {\n        headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n      }\n\n      return fetch(url, _objectSpread({\n        headers: headers\n      }, options)).then(this._checkStatus).then(function (response) {\n        return response.json();\n      });\n    })\n  }, {\n    key: \"_checkStatus\",\n    value: function _checkStatus(response) {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport { AuthService as default };","map":{"version":3,"sources":["/Users/topgyaltsering/Desktop/team6-topgyal/frontend/src/AuthService/AuthService.js"],"names":["decode","AuthService","domain","fetch","bind","login","getProfile","email","password","method","body","JSON","stringify","then","res","setToken","token","Promise","resolve","getToken","isTokenExpired","decoded","exp","Date","now","err","idToken","localStorage","setItem","getItem","removeItem","url","options","headers","Accept","loggedIn","_checkStatus","response","json","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import decode from \"jwt-decode\";\n\n/*\nAuthor: Eunice Hew\nAuthentication for login, registration, forget password\n*/\n\nexport default class AuthService {\n  constructor(domain) {\n    this.domain = domain || \"http://localhost:8080\"; // API server domain\n    this.fetch = this.fetch.bind(this);\n    this.login = this.login.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(email, password) {\n    // Get a token from api server using the fetch api\n    return this.fetch(`${this.domain}/Login`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => {\n      this.setToken(res.token); // Setting the token in localStorage\n      return Promise.resolve(res);\n    });\n  }\n\n  forgotPassword(email) {\n    return this.fetch(`${this.domain}/Login`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        email\n      })\n    }).then(res => {\n      this.setToken(res.token);\n      return Promise.resolve(res);\n    });\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // Getting token from localstorage\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        // Checking if token is expired.\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem(\"id_token\", idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem(\"id_token\");\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem(\"id_token\");\n  }\n\n  getProfile() {\n    // Using jwt-decode npm package to decode the token\n    return decode(this.getToken());\n  }\n\n  fetch(url, options) {\n    // performs api calls sending the required authentication headers\n    const headers = {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    };\n\n    // Setting Authorization header\n    // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n    if (this.loggedIn()) {\n      headers[\"Authorization\"] = \"Bearer \" + this.getToken();\n    }\n\n    return fetch(url, {\n      headers,\n      ...options\n    })\n      .then(this._checkStatus)\n      .then(response => response.json());\n  }\n\n  _checkStatus(response) {\n    // raises an error in case response status is not a success\n    if (response.status >= 200 && response.status < 300) {\n      // Success status lies between 200 to 300\n      return response;\n    } else {\n      var error = new Error(response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}